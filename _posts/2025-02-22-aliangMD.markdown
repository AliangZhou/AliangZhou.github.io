---
layout:     post
title:      "C++单例模式 2025"
subtitle:   " \"C++单例模式 Blog\""
date:       2025-02-22 12:00:00
author:     "AliangZhou"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - Meta
---

# 介绍
单例模式(Singleton Pattern，也称为单件模式，使用最广泛的设计模式之一。其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。
## UML类图
![[Pasted image 20230915235001.png]]
# 单例模式分类
区别在于创建实例的时间不同
## 懒汉模式
系统运行时候并不存在，只有在需要使用该实例时，才会创建。**这种方式需要考虑线程安全**

```C++
#ifndef TRANSMITSIGNALS_H
#define TRANSMITSIGNALS_H
#include <QObject>
class TransmitSignals : public QObject
{
    Q_OBJECT
public:
    ~TransmitSignals();
    static TransmitSignals &getInstance();
    TransmitSignals(const TransmitSignals &) = delete;
    TransmitSignals(const TransmitSignals &&) = delete;
    TransmitSignals &operator=(const TransmitSignals &) = delete;
signals:
    void flagChange(const bool ret);
private:
    explicit TransmitSignals();
	static TransmitSignals* m_pInstance;
public slots:
};
#endif // TRANSMITSIGNALS_H
```
transmitsignals.cpp
```C++
#include "transmitsignals.h"
#include <QDebug>
TransmitSignals* TransmitSignals::m_pInstance = nullptr;
TransmitSignals &TransmitSignals::getInstance()
{
    if(!m_pInstance){
        m_pInstance = new TransmitSignals();
    }
    return m_pInstance;
}
TransmitSignals::TransmitSignals()
{
    qDebug() << "constructor called!";
}
TransmitSignals::~TransmitSignals()
{
    qDebug() << "destructor called!";
}
```

## 饿汉模式
系统运行时就创建实例，这种方式本身就是线程安全。
```c++
#include <iostream>
#include <memory>
#include <mutex>

class Singleton {
public:
    static std::shared_ptr<Singleton> getSingleton();

    void print() {
        std::cout << "Hello World." << std::endl;
    }

    ~Singleton() {
        std::cout << __PRETTY_FUNCTION__ << std::endl;
    }

private:
    Singleton() {
        std::cout << __PRETTY_FUNCTION__ << std::endl;
    }
};

static std::shared_ptr<Singleton> singleton = nullptr;
static std::once_flag singletonFlag;

std::shared_ptr<Singleton> Singleton::getSingleton() {
    std::call_once(singletonFlag, [&] {
        singleton = std::shared_ptr<Singleton>(new Singleton());
    });
    return singleton;
}

```
## Qt自带线程安全方式    
**Q_GLOBAL_STATIC**
```c++
Q_GLOBAL_STATIC(MyType, staticType)
```
上面的示例创建了一个名为staticType的QGlobalStatic类型的对象。在上述声明之后，可以像使用指针一样使用staticType对象，保证只初始化一次。除了用作指针之外，该对象还提供了两个方法来确定全局变量的当前状态:exists()和isDestroyed()。

**列子**：
```C++

#ifndef SIGEVENTTRANSIT_H
#define SIGEVENTTRANSIT_H
#include <QObject>
class SigEventTransit : public QObject
{
    Q_OBJECT
public:
    explicit SigEventTransit(QObject *parent = 0);
    static SigEventTransit& getInstance();
}

--------------------------------------------------------------------
#include "sigeventtransit.h"
Q_GLOBAL_STATIC(SigEventTransit, sigEventManager)
SigEventTransit::SigEventTransit(QObject *parent) : QObject(parent)
{
}
SigEventTransit &SigEventTransit::getInstance()
{
    return *sigEventManager();
}
```
## C++11带的线程安全模式(饿汉)
```C++
#include <iostream>
#include <thread>
#include <queue>
#include <mutex>

using namespace std;

//单例模式下的任务队列功能
class TaskQueue{
public:
	static TaskQueue* getInstance(){
		return m_gTaskQueue;
	}
    TaskQueue(const TaskQueue &t) = delete;

    TaskQueue& operator=(const TaskQueue& t) = delete;
    void print() {
        cout << "this is signle...." << endl;
    }

    //判断队列是否为空
    bool isEmpty() {
        lock_guard<mutex> lock(m_mmutex);
        return m_data.empty();
    }

    //得到队列的size

    int dataSize() {
        lock_guard<mutex> lock(m_mmutex);
        int msize = (int)m_data.size();
        return msize;
    }
    //向队列里面增加元素
    void addTask(int value) {
        lock_guard<mutex> lock(m_mmutex);
        m_data.push(value);
    }

    //队列弹出元素
    bool popTask() {
        lock_guard<mutex> lock(m_mmutex);
        if (m_data.empty()) {
            return false;
        }
        m_data.pop();
        return true;
    }

    //获取元素（不删除元素）
    int getTask() {
        lock_guard<mutex> lock(m_mmutex);

        if (m_data.empty()) {

            return -1;

        }
        int ndata = m_data.front();
        return ndata;
    }

private:
    TaskQueue() = default;
    static TaskQueue* m_gTaskQueue;
    queue<int> m_data;
    mutex m_mmutex;
};
TaskQueue *TaskQueue::m_gTaskQueue = new TaskQueue;

int main()
{
    TaskQueue *tq = TaskQueue::getInstance();
    //生产者
    thread thread1([=]{
        for(int i = 0; i < 10; i++){
            tq->addTask(i+100);
            cout << "+++ push data: " << i + 100 << ", threadID: " <<this_thread::get_id() << endl;
            this_thread::sleep_for(chrono::milliseconds(500));
        }
    });

    //消费者

    thread thread2([=]{
        for(int i = 0; i < 10; i++){
            this_thread::sleep_for(chrono::milliseconds(100));
            while(!tq->isEmpty()){
                int nValue = tq->getTask();
                cout << "+++ take data: " << i + 100 << ", threadID: " <<this_thread::get_id() << endl;
			tq->popTask();
             this_thread::sleep_for(chrono::milliseconds(1000));
            }
        }
    });
    
    thread1.join();
    thread2.join();
    return 0;
}

